/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package dkp;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author aaron
 */
public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txtSource = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDestination = new javax.swing.JTextPane();
        btnParse = new javax.swing.JButton();
        btnPaste = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        btnAuto = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblRaidZone = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblTimeStamp = new javax.swing.JLabel();
        btnParseFile = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setViewportView(txtSource);

        jScrollPane3.setViewportView(txtDestination);

        btnParse.setText("-> Parse My Log! ->");
        btnParse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParseActionPerformed(evt);
            }
        });

        btnPaste.setText("Paste From Clipboard");
        btnPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasteActionPerformed(evt);
            }
        });

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Copy To Clipboard");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        btnAuto.setBackground(new java.awt.Color(238, 255, 255));
        btnAuto.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        btnAuto.setForeground(new java.awt.Color(122, 0, 255));
        btnAuto.setText("Do Magic");
        btnAuto.setToolTipText("Automatically finds the latest guild dump in the default EverQuest installation, parses it and the copies it to the clipboard ready for pasting to the raid attendance window!");
        btnAuto.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoActionPerformed(evt);
            }
        });

        jLabel1.setText("Raid Zone:");

        lblRaidZone.setText(" ");

        jLabel2.setText("Time Stamp:");

        lblTimeStamp.setText(" ");

        btnParseFile.setText("Parse From File");
        btnParseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParseFileActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Delete All Logs");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(251, 251, 251)
                        .addComponent(lblStatus)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnPaste)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnParseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(96, 96, 96)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnParse, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jToggleButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRaidZone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblTimeStamp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnParseFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(btnPaste)
                    .addComponent(jButton1)))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStatus)
                        .addGap(217, 217, 217)
                        .addComponent(btnParse))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lblRaidZone))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lblTimeStamp))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasteActionPerformed
        String text = new TextTransfer().getClipboardContents();
        
        txtSource.setText(text);
    }//GEN-LAST:event_btnPasteActionPerformed

    private void btnParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParseActionPerformed
        parse();
    }//GEN-LAST:event_btnParseActionPerformed

    private void parse() {
        String text = txtSource.getText();
        
        String[] lines = text.split("\n");
        String[] zones = new String[lines.length];
        int[] zoneCount = new int[lines.length];
        
        for (int i = 0; i < lines.length; i++) {
            String[] splits = lines[i].split("\t");
            
            if (splits[4].equals("A")) {
                lines[i] = "";
            } else {
                zones[i] = splits[6];
                
                lines[i] = splits[0];
            }
        }
        
        for (String zone : zones) {
            if (zone == null) continue;
            for (int i = 0; i < lines.length; i++) {
                if (zones[i] != null && zone.equalsIgnoreCase(zones[i])) {
                    zoneCount[i]++;
                }
            }
        }
        
        int max = 0;
        String raidZone = "";
        
        for (int i = 0; i < lines.length; i++) {
            if (zoneCount[i] > max) {
                max = zoneCount[i];
                raidZone = zones[i];
            }
        }

        for (int i = 0; i < lines.length; i++) {
            if (zones[i] != null && !zones[i].equals(raidZone))
                lines[i] = "";
        }
        
        String afterText = "";
        for (String s : lines) {
            if (!s.equals(""))
                afterText += s + "\n";
        }
        txtDestination.setText(afterText);
        
        lblRaidZone.setText(raidZone);
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txtSource.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        new TextTransfer().setClipboardContents(txtDestination.getText());
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void btnAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoActionPerformed
        lblStatus.setText("Searching ...");

        // Work out bittage
        File win32 = new File("C:/Program Files (x86)/");
        
        if (!win32.exists()) {
            win32 = new File("C:/Program Files/");
        }
        
        if (!win32.exists()) {
            lblStatus.setText("A fellow mac user! Awesome! But no support for you, sorry");
        } else {
            win32 = new File(win32.getAbsolutePath() + "/Sony/Everquest/");
        }
        
        File lastLog = null;
        
        try {
            File[] list = win32.listFiles();
            for (File l : list) {
                if (l.getName().contains("Indubious")) {
                    lastLog = l;
                }
            }
        } catch (Exception e) { e.printStackTrace(); }
        
        if (lastLog == null) {
            File settings = new File("dkpSettings.txt");
            if (settings.exists()) {
                try {
                    BufferedReader reader = new BufferedReader(new FileReader(settings));
                    
                    win32 = new File(reader.readLine());
                    
                    reader.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            
            try {
                File[] list = win32.listFiles();
                for (File l : list) {
                    if (l.getName().contains("Indubious")) {
                        lastLog = l;
                    }
                }
            } catch (Exception e) { e.printStackTrace(); }
        
            if (lastLog == null) {
                FindEQ findEQ = new FindEQ(this, true);
                findEQ.setVisible(true);
                
                win32 = FindEQ.folderChosen;
                
                try {
                    File[] list = win32.listFiles();
                    for (File l : list) {
                        if (l.getName().contains("Indubious")) {
                            lastLog = l;
                        }
                    }
                } catch (Exception e) { e.printStackTrace(); }

                if (lastLog == null) {
                    lblStatus.setText("Sorry, but I cannot find anything there ><");
                } else {
                    lblStatus.setText("Success");
                }
            } else {
                lblStatus.setText("Success");
            }
        } else {
            lblStatus.setText("Success!");
        }
        try {
            BufferedReader reader = new BufferedReader(new FileReader(lastLog));
            
            String text = "";
            
            String line;
            while ((line = reader.readLine()) != null) {
                text += line + "\n";
            }
            
            txtSource.setText(text);
        } catch (Exception ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        parse();
        
        String name = lastLog.getName();
        
        String time = parseTime(name.split("-")[2]);
        
        lblTimeStamp.setText(time);
        
        new TextTransfer().setClipboardContents(txtDestination.getText());
    }//GEN-LAST:event_btnAutoActionPerformed

    private void btnParseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParseFileActionPerformed
        ParseFile pf = new ParseFile(this, true);
        pf.setVisible(true);
        pf.setModal(true);
        
        int index = pf.getList().getSelectedIndex();
        String fileName = ParseFile.fileMap.get(index);
        //String fileName = (String)(pf.getList().getSelectedIndex());
        
        try {
            BufferedReader reader = new BufferedReader(new FileReader(new File(fileName)));
            
            String text = "";
            
            String line;
            while ((line = reader.readLine()) != null) {
                text += line + "\n";
            }
            
            txtSource.setText(text);
        } catch (Exception ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        parse();
        
        new TextTransfer().setClipboardContents(txtDestination.getText());
    }//GEN-LAST:event_btnParseFileActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Work out bittage
        File win32 = new File("C:/Program Files (x86)/");
        
        if (!win32.exists()) {
            win32 = new File("C:/Program Files/");
        }
        
        if (!win32.exists()) {
            win32 = new File("/Users/aaron/Desktop/Everquest");
        } else {
            win32 = new File(win32.getAbsolutePath() + "/Sony/Everquest/");
        }
        
        File[] list = win32.listFiles();
        for (File l : list) {
            if (l.getName().contains("Indubious")) {
                l.deleteOnExit();
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }
    
    public static String parseDate(String date) {
        int year = new Integer(date.substring(0, 4)).intValue();
        int month = new Integer(date.substring(4, 6)).intValue();
        int day = new Integer(date.substring(6, 8)).intValue();
        
        return year + "/" + month + "/" + day;
    }
    
    public static String parseTime(String time) {
        int hours = new Integer(time.substring(0, 2)).intValue();
        int minutes = new Integer(time.substring(2, 4)).intValue();
        
        String period = "am";
        if (hours > 12) {
            hours -= 12;
            period = "pm";
        }
        
        String stamp = hours + ":" + minutes + " " + period;
        
        return stamp;
    }
    
    public static String parseRaidZone(File file) {
        String text = "";
        
        try {
            BufferedReader reader = new BufferedReader(new FileReader(file));

            String line;
            while ((line = reader.readLine()) != null) {
                text += line + "\n";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        String[] lines = text.split("\n");
        String[] zones = new String[lines.length];
        int[] zoneCount = new int[lines.length];
        
        for (int i = 0; i < lines.length; i++) {
            String[] splits = lines[i].split("\t");
            
            if (splits[4].equals("A")) {
                lines[i] = "";
            } else {
                zones[i] = splits[6];
                
                lines[i] = splits[0];
            }
        }
        
        for (String zone : zones) {
            if (zone == null) continue;
            for (int i = 0; i < lines.length; i++) {
                if (zones[i] != null && zone.equalsIgnoreCase(zones[i])) {
                    zoneCount[i]++;
                }
            }
        }
        
        int max = 0;
        String raidZone = "";
        
        for (int i = 0; i < lines.length; i++) {
            if (zoneCount[i] > max) {
                max = zoneCount[i];
                raidZone = zones[i];
            }
        }
        
        return raidZone;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAuto;
    private javax.swing.JButton btnParse;
    private javax.swing.JButton btnParseFile;
    private javax.swing.JButton btnPaste;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel lblRaidZone;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTimeStamp;
    private javax.swing.JTextPane txtDestination;
    private javax.swing.JTextPane txtSource;
    // End of variables declaration//GEN-END:variables
}
